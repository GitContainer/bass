Single Wave-Interactive protocol

Dependencies:
Enthought’s distribution of Python (Canopy): https://store.enthought.com/

Optional components (recommended for full feature set):
pyEEG: http://pyeeg.sourceforge.net/

Follow the steps in order to analyze your data. Check out [Requirements](https://github.com/drcgw/bass/wiki/Requirements) to make sure your system can run this notebook.

#Open ipython notebook: 

1. Open a terminal window.

2. Type `ipython notebook` then press `Enter`.

3. The notebook should launch automatically in a web browser window. Make sure that the window is not internet explorer (chrome is ideal, firefox is fine). If the page doesn’t load, look for the line in the terminal window that reads: `The IPython Notebook is running at: http://###.#.#.#:8888/‘`. You can copy and paste the address into the address bar of your web browser.

4. Do not launch from Canopy! 

5. Navigate through your folder tree to where you have saved the `Single Wave-Interactive.ipynb` file. Click on it to open it.

#Welcome to BASS

To run code blocks, click on the block then press the play button at the top of the page OR hit `Shift + Enter`. More often than not, you will not have to type directly in the code boxes. Instead, you will be prompted to type in boxes that appear after you run a block. If you do need to type into code boxes, it will be to change variable strings, which look like:
	`key = ‘Mean1’`
	`meas = 'Intervals'`
change *ONLY* the word(s) on the right of the equal sign. These **MUST** have quotes around them, or the code will not run. 
Blocks of code are identified here by the header above them. There are also helpful boxes that contain instructions imbedded in the notebook.


##Initialize
	
1. Run this block of code. It only needs to be run once at the beginning of each session.

2. If the initialization worked, `BASS ready!` will print below this box.

3. Sometimes on windows, it will throw an error about openpyxl not being compatible. This is not an issue that will affect this notebook. Carry on. 

# Begin User Input
##Load

1. Run this block of code. You will be prompted to enter the loading information. This block is required.

2. Designate the path to your file to load. This does not include the file itself.
	
	Mac OSX Example: '/Users/MYNAME/Documents/bass'
	Microsoft Example: 'C:\\Users\MYNAME\Documents\bass'

3. Enter the name of the file, including the file type. This file should be a tab delimited text file with no header. Time must be the first column and in seconds.
	
	Example: ‘rat34_ECG.txt’

4. Designate the location of the folder where you would like the folder containing your results to go. If the folder does not exist, then it will be created. A plots folder, called 'plots' will be created inside this folder for you if it does not already exist.

	Mac OSX Example: '/Users/MYNAME/Documents/output'
	Microsoft Example: 'C:\\Users\MYNAME\Documents\output'

5. When the data is loaded, the notebook will print 
	`Made plots folder
	Data Loaded`

6. **Tips**: You can right-click on a file and select properties to get the full file path, then copy and paste it into these prompts. 

7. **Troubleshooting**: You are sure that the file path you gave is correct, but it throws and error saying that the file doesn’t exist. Make sure that you included the file type in the file name and that it doesn’t accidentally have the extension twice (‘rat34_ECG.txt.txt’). You should also make sure that your slashes are going the correct way for your operating system.

##Graph Data

1. Run this block of code. This will launch a pop-up window with a plot of your raw data. You can save this plot by clicking on the save icon. You can also pan and zoom.

2. For more information on how to use the interactive plot windows: http://matplotlib.org/users/navigation_toolbar.html 

#Power Spectral Density

1. Optional code block: Set frequency bands to calculate the area under the curve, with output of raw power.

2. In the next block, type `‘raw’` or `‘dB’` to change the scale of the PSD graph to raw Power or decibels/Hz. Run the block.

3. The PSD graph will launch. 2. For more information on how to use the interactive plot windows: http://matplotlib.org/users/navigation_toolbar.html

4. If power in bands was set, then the power in bands will print when the graph is closed. this table will be automatically saved out as a .csv. 

5. Use this information to determine the low cut and high cut for you band-pass filter, if you need it.

##Spectrogram

1. Run this block to launch the spectrogram of the raw data. This block can take some time to run, so be patient with it. The y-axis autoscales so that only ‘active’ frequencies greater than 0.0000001 are displayed. the color bar is autoscaled to the minimum and maximum of the given spectrum.

2. For more information on how to use the interactive plot windows: http://matplotlib.org/users/navigation_toolbar.html

3. Use this information to determine the low cut and high cut for you band-pass filter, if you need it.

#Transform Data

##Load settings from a file

0. if you want to load a previously outputted BASS settings file, use this block. The name can be changed.

1. Run this block of code, you will be prompted to enter the full file path and file name. Expected format is '.csv’, but the file name can be changed to anything.

	Mac OSX Example: '/Users/MYNAME/Documents/bass_settings.csv'
	Microsoft Example: 'C:\\Users\MYNAME\Documents\bass_settings.csv'

2. The settings will be displayed in the table below. You do not need to use any of the `Set Settings` blocks if you do not need to change a parameter. 

##Enter your settings for data transformation

0. If you loaded settings from a file, you can skip this step. HOWEVER, you must do one or the other. there are no defaults.

1. Run this block of code. You will be prompted to Enter values for different transformation and filtering settings. Choose which of these is right for your dataset. 

##Linear Fit

Linear fit is used to detrend linear data. It does this by generating a best fit line, then subtracting it from the data. 

`Linear Fit (True/False):` Enter `False` to not use this function. Enter `True` to use this function.

`Linear Fit R value (0-1):` Enter a number between 0 and 1. A linear fit using the raw data is generated by the function. Using this line for subtraction will only happen if the r value is greater than this.

`Rolling Window Linear fit R value (0-1):` Enter a number between 0 and 1. A linear fit using the the rolling average of the original data is generated by the function. Using this line for subtraction will only happen if the r value is greater than this.

`Rolling Window size (even integer):` Enter an even integer. This is the size (n) of the window used to create the rolling/moving average of the data

	a. If you data has a gradual, linear slope, use this to flatten your data. Ex) photobleaching from fluorescence microscopy.
	
	b. **SAMPLE PICTURE COMING SOON**

3. Butterworth BandPass Filter. Enter values for the lowcut, highcut, and polynomial order separated by commas. if you don't want to use this filter, enter `none` or `False`.

	a. If you data has a consistent noise use this to filter your data. Ex) `30, 50, 4`.

	b. **SAMPLE PICTURE COMING SOON**

5. Savitsky-Golay Filter. Enter values for the window size and polynomial order separated by commas. If you don't want to use this filter, enter `none`. Window size must be odd. Polynomial order must be greater than 3. Absolute Value must have been `True`. The units for window size are indices, not seconds.

	a. This filter smooths out data while still preserving events/peaks. Ex) `301, 4`.

	b. If the data is too course/not smooth enough, increase the window size. If the data is too smooth or events have vanished, decrease the window size.

	b. **SAMPLE PICTURE COMING SOON**

5. Absolute Value. Enter `True` or `False` to use this function. If you are using the Savitsky-Golay Filter, then this function will automatically be set to `True`.

6. You can rerun this block of code as many times as you need as you adjust your settings. 

##Run data transformation

1. Run this block of code. This will launch a pop-up window with a plot of your transformed data. You can save this plot by clicking on the save icon. You can also pan and zoom.

2. For more information on how to use the interactive plot windows: http://matplotlib.org/users/navigation_toolbar.html 

3. If you aren't satisfied with how your data looks, return to the Enter Settings block and change your parameters.

#Set Baseline for Thresholding

##Choose either linear or rolling baseline

0. If you loaded settings from a file, you can skip this step.

1. Choose either `linear` or `rolling` baseline. linear assumes that the first 0.1 seconds of data are representative baseline, then uses the average of this interval to create a linear threshold for events. Rolling uses a window to to a moving average of the data.

2. If rolling is selected, then specify the window size in milliseconds. the smaller the window, the more sensitive the baseline will be.

##Run baseline

1. Run this block of code. This will launch a pop-up window with a plot of your baseline. You can save this plot by clicking on the save icon. You can also pan and zoom.

2. For more information on how to use the interactive plot windows: http://matplotlib.org/users/navigation_toolbar.html 

3. If you aren't satisfied with how your baseline, return to the Enter Settings block and change your parameters.

#Display Settings

0. Use this block at any time to display all of the current settings. 

#Event Detection

##Peaks

##Enter Delta value

1. Run this block of code. It will prompt you to enter a `delta` value between a given range (based on your dataset). 

##Run Event Peak Detection

1. This will also launch a pop-up window with a plot of your data with the peaks overlaid as green triangles. Once you close the plot, a summary table will print.

3. If too many peaks are detected, rerun block with a bigger `delta`.

4. If too few peaks are detected, rerun block with a smaller `delta`.

##Bursts

##Enter Threshold and Cluster time values

1. Run this block of code. It will prompt you to enter a `threshold` value between a given range (based on your dataset). 

      a. **Linear** This value is a proportion of the baseline number -Ex) 1.0 is 100% greater than baseline

      b. **Rolling** This value is the amplitude shift up from the baseline. 

2. Enter the `minimum inter-event interval` in seconds. This value is the minimum distance two events can be from each other. if two events are closer together than this limit, then they are combined into one event.

##Run Event Burst Detection

1. This will automatically launch a plot of the results: burst start will be in yellow and burst end will be in magenta. the red horizontal line is the threshold set using `threshold value`. The blue horizontal line is the baseline value (See [Assumptions](https://github.com/aedobyns/SWAN/wiki/Assumptions) for more on this). Use this to adjust either setting to better detect event boundaries. You can save this plot using the save icon. Once you close the plot, a summary table will print.

##Burst Area

1. Run this block of code. It will take some time (up to several minutes), since it is performing integrations.

2. Skip this step if you are in a hurry or don't need this value.

#Save all files and settings

##Save

1. Run this block of code. This will save all Result Tables, Result Summary Tables, and Settings. 

2. If you change settings and rerun your data, all files will be saved over EXCEPT Settings. The Settings file serves as your record of each 'run' of the data you do. It is labeled with the unique datetime stamp of when you saved the files.

#Results Plots

##Poincare plots

1. Run both or either blocks of code to see the poincare plots of `Total Cycle Time` or `R-R intervals`.

2. Plots can be saved using the save icon in the plot pop-up.

3. SD1 and SD2 are printed in the notebook. Note: these values are not saved in any data tables.

	a. Advanced Users: Any result can be run using this function. Simply call the name of the column from the `Results['Peaks']` or `Results['Bursts']` dataframes.

##Line plots

1. Run this block of code to generate a two panel graph of the raw wave and analyzed wave. the first 10 seconds are the automatic settings. You can pan and zoom as needed.

2. Plots can be saved using the save icon in the plot pop-up.

##Frequency Plot

1. Run this block to plot the frequency of events (detected with peak detect) in events/min.

2. You can save this plot by clicking on the save icon. For more information on how to use the interactive plot windows: http://matplotlib.org/users/navigation_toolbar.html 

#Power Spectral Density

The two sections are identical, except for which frequency data set they are handling. Peaks uses the peaks (for heart rate, this is the R-R intervals). Bursts uses the event start time array.

##Settings

1. Run this block of code to initialize our settings for the PSD plots and calculations. To change the values, type directly into the block. You will need to change your bands depending on the type of data you are analyzing. Note) hf can be no more than half hz.

##Peaks

1. Run this block of code. It will automatically launch the plot of the FFT of this data set.

2. You can save this plot by clicking on the save icon. For more information on how to use the interactive plot windows: http://matplotlib.org/users/navigation_toolbar.html 

3. When you close the plot, a summary table of the area under the curve will print for each of the bands specified.

##Bursts

1. Run this block of code. It will automatically launch the plot of the FFT of this data set.

2. You can save this plot by clicking on the save icon. For more information on how to use the interactive plot windows: http://matplotlib.org/users/navigation_toolbar.html 

3. When you close the plot, a summary table of the area under the curve will print for each of the bands specified.

## Save PSD results and settings

1. Run this block to save the results table and the settings from the PSD section.

#HistEntropy

1. Run the blocks (first block for peaks, second for bursts) to generate the histogram of the interval data.

2. When you close the plot, the number of bins and the entropy values are printed in the notebook.

## Save HistEntropy Results

1. Run this block to save histogram entropy results.  

#STOP HERE

1. Congrats. You finished one data file. You have some choices now.

2. Continue on to advanced user options (if you're into that).

3. Run another data file by returning to the **Begin User Input** block. You must run every block again (in order) to run a new file. 

4. You can quit by saving the notebook (if you want to retain a copy of your workflow) and then closing the window. Kill the kernel in the terminal window by pressing `control c` then typing `y`.

5. If you are using git to version control and track your analysis (which is **HIGHLY** recommended), commit now before you load the next data file.

#Advanced User option

1. This section contains beta version of function calls not yet incorporated with pretty wrappers. Use at your own risk and peril. 

2. Some of these things here require those [Optional Components](https://github.com/aedobyns/SWAN/wiki/Optional-Components)

## Approximate entropy

1. This block require PyEEG to be in your python path. It is not distributed in Canopy. 

2. Run this block of code to execute the code as i have written it. Parameters (probably) need to be changed for individual users. 

3. Check out the documentation for pyeeg for more information on how to change M and R: http://pyeeg.sourceforge.net/


##Blank Code Block

1. Down here, at the bottom, is where you can explore yourself. I'm surprised you kept reading up until this point. You must be a dedicated user as well as an advanced one. 

2. Type your own python right in here. Don't let anyone tell you different. Feel free to exploit PyEEG functions if you have that in your path. All the data you could want is stored as conveniently named things. 

3. Best of Luck!